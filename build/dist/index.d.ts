// Generated by dts-bundle-generator v9.5.1

import { Placement } from '@floating-ui/dom';
import { Editor, EditorOptions } from '@tiptap/core';
import { TemplateResult } from 'lit-html';
import { Ref } from 'lit/directives/ref.js';

export type PdConfig = {
	editor: {
		style: string;
		config: Partial<EditorOptions>;
	};
	toolbar: {
		style: string;
	};
	button: {
		style: string;
	};
	modal: {
		backdrop: {
			style: string;
		};
		dialog: {
			style: string;
		};
	};
	dropdown: {
		style: string;
		item: {
			style: string;
		};
	};
};
export declare const pdConfig: PdConfig;
export type MenuItem = {
	title: string;
	icon: TemplateResult;
	action: (e: PointerEvent, dropdown: PdDropdown) => void;
};
declare class PdDropdown extends HTMLElement {
	#private;
	connectedCallback(): void;
	disconnectCallback(): void;
	setPlacement(placement: Placement): void;
	getPlacement(): Placement;
	getReference(): HTMLElement | PdButton | undefined;
	renderHTML(html: TemplateResult): void;
	updatePosition(): Promise<void>;
	show(reference: HTMLElement): Promise<void>;
	hide(): void;
	toggle(reference: HTMLElement): void;
	onClickOutside(e: MouseEvent): void;
	render(): import("lit-html").RootPart | undefined;
}
declare class PdModal extends HTMLElement {
	/**
	 * A reference to the element that activated the modal
	 */
	protected reference?: HTMLElement | PdButton;
	constructor();
	show(reference: HTMLElement | PdButton): void;
	hide(): void;
	toggle(reference: HTMLElement | PdButton): void;
	render(): void;
}
export interface PdButton {
	/**
	 * Button icon https://lucide.dev/icons/
	 */
	getIcon(): string;
	/**
	 * Button type, `button`, `dropdown` or `modal`
	 *
	 * Default `button`
	 */
	getType(): "dropdown" | "modal" | "button";
	/**
	 * A function that runs each time the editor emits
	 * a transaction to check whether the button should be active
	 */
	isActive(): boolean;
	/**
	 * A `lit html` to render inside a `modal` or `dropdown`
	 */
	getTemplate(): TemplateResult | MenuItem[];
	/**
	 * A callback function that runs when clicking the button
	 *
	 * `modal` and `dropdown` dont have a `onClick` callback
	 */
	onClick(): void;
	/**
	 * Called when all attributes are parsed, events are
	 * registered and element is connected to the DOM tree
	 */
	onMount(): void;
}
export declare class PdButton extends HTMLElement implements PdButton {
	/**
	 * Reference to TipTap editor
	 */
	protected editor: Editor;
	/**
	 * Reference to dropdown element
	 */
	protected dropdown: PdDropdown;
	/**
	 * Reference to modal element
	 */
	protected modal: PdModal;
	/**
	 * Used in the tooltip
	 *
	 * In a `modal` also used as header title
	 *
	 * @returns
	 */
	getTitle(): string;
	constructor(
	/**
	 * Reference to TipTap editor
	 */
	editor: Editor, 
	/**
	 * Reference to dropdown element
	 */
	dropdown: PdDropdown, 
	/**
	 * Reference to modal element
	 */
	modal: PdModal);
	/**
	 * Dont call the `connectedCallback` inside a custom button
	 *
	 * Use the `onMount` hook instead
	 *
	 * @deprecated use `onMount` instead
	 */
	connectedCallback(): void;
	setActive(): void;
	setInactive(): void;
	toggleActive(): void;
}
declare class PdButtonHeading extends PdButton {
	getType(): "dropdown";
	getIcon(): string;
	isActive(): boolean;
	getTemplate(): {
		title: string;
		icon: import("lit-html").TemplateResult<1>;
		action: () => void;
	}[];
}
declare class PdButtonBold extends PdButton {
	getIcon(): string;
	onClick(): void;
	isActive(): boolean;
}
declare class PdButtonItalic extends PdButton {
	getIcon(): string;
	onClick(): void;
	isActive(): boolean;
}
declare class PdButtonStrike extends PdButton {
	getIcon(): string;
	onClick(): void;
	isActive(): boolean;
}
declare class PdButtonLink extends PdButton {
	formRef: Ref<HTMLFormElement>;
	constructor(editor: Editor, dropdown: PdDropdown, modal: PdModal);
	getType(): "modal";
	getIcon(): string;
	getTitle(): string;
	isActive(): boolean;
	setLink(e: SubmitEvent): void;
	unsetLink(): void;
	getTemplate(): import("lit-html").TemplateResult<1>;
	showDropdown(): void;
	get textValue(): string;
	get urlValue(): any;
}
declare class PdButtonOrderedList extends PdButton {
	getIcon(): string;
	getTitle(): string;
	onClick(): void;
	isActive(): boolean;
}
declare class PdButtonBulletList extends PdButton {
	getIcon(): string;
	getTitle(): string;
	onClick(): void;
	isActive(): boolean;
}
declare class PdButtonTable extends PdButton {
	protected button: HTMLButtonElement;
	onMount(): void;
	getTitle(): string;
	getIcon(): string;
	onClick(): void;
	isActive(): boolean;
	showButton(): void;
	showDropdown(): void;
}
declare class PdButtonUnderline extends PdButton {
	getIcon(): string;
	getTitle(): string;
	onClick(): void;
	isActive(): boolean;
}
export type ToolbarButtons = {
	"heading": typeof PdButtonHeading;
	"bold": typeof PdButtonBold;
	"italic": typeof PdButtonItalic;
	"underline": typeof PdButtonUnderline;
	"strikethrough": typeof PdButtonStrike;
	"link": typeof PdButtonLink;
	"ordered-list": typeof PdButtonOrderedList;
	"bullet-list": typeof PdButtonBulletList;
	"table": typeof PdButtonTable;
	[key: string]: typeof PdButton;
};
declare class PdEditorToolbar extends HTMLElement {
	buttons: ToolbarButtons;
	connectedCallback(): void;
	/**
	 * Add a new button implementation
	 *
	 * To display the button in the toolbar you have to
	 * update the toolbar attribute on the editor element
	 *
	 * @param name      - name of the button
	 * @param button    - implementation
	 */
	addButton(name: string, button: typeof PdButton): void;
	/**
	 * Removes a registrated button
	 *
	 * This will also remove the button from the toolbar
	 * since we deleted the implementation
	 *
	 * @param name      - name of the button which was used upon registration
	 */
	removeButton(name: string): void;
}
export declare class PdEditor extends HTMLElement {
	static observedAttributes: string[];
	/**
	 * Reference to TipTap editor
	 *
	 * @type {Editor}
	 */
	editor: Editor;
	/**
	 * Reference to PdEditorToolbar
	 *
	 * @type {PdEditorToolbar}
	 */
	toolbar: PdEditorToolbar;
	/**
	 * Reference to PdDropdown
	 *
	 * @type {PdDropdown}
	 */
	dropdown: PdDropdown;
	/**
	 * Reference to PdModal
	 *
	 * @type {PdModal}
	 */
	modal: PdModal;
	constructor();
	renderButtons(): void;
}

export {};
